* mean zero or more
? mean optional

expr    		: IDENTIFIER EQ expr
				: comp-expr ((KEYWORD:AND|KEYWORD:OR) comp-expr)*

comp-expr		: KEYWORD:NOT comp-expr	
				: arith-expr ((EE|LT|GT|LTE|GTE) arith-expr)*

arith-expr		: term ((PLUS|MINUS) term)*

term    		: factor ((MUL|DIV|INT-DIV|MOD) factor)*

factor			: (PLUS|MINUS) factor
				: power

power			: call (POW factor)*

call			: atom (LPAREN (expr (COMMA expr)*)? RPAREN)?
				: atom (DOT|EQ) IDENTIFIER (LPAREN (expr (COMMA expr)*)? RPAREN)

atom 			: INT|FLOAT|STRING|IDENTIFIER
				: LPAREN expr RPAREN
				: array-expr
				: if-expr
				: for-expr
				: while-expr
				: do-while-expr
				: func-def

array-expr		: LSQUARE (expr (COMMA expr)*)? RSQUARE

if-expr			: KEYWORD:if expr KEYWORD:then expr
			  	  (KEYWORD:elseif expr KEYWORD:then expr)*
			  	  (KEYWORD:else expr)?

for-expr		: KEYWORD:for IDENTIFIER EQ expr KEYWORD:to expr
			  	  (KEYWORD:step expr)? KEYWORD:then expr

while-expr		: KEYWORD:while expr KEYWORD:then expr

do-while-expr	: KEYWORD:do expr KEYWORD:until expr

func-def		: KEYWORD:function IDENTIFIER?
				  LPAREN (IDENTIFIER (COMMA IDENTIFIER)*)? RPAREN
				  ARROW expr