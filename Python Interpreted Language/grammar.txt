KEY:
* means zero or more
+ means one or more
? means optional
| means or

statements		: NEWLINE* expr (NEWLINE+ expr)* NEWLINE*

expr    		: IDENTIFIER EQ expr
				: comp-expr ((KEYWORD:AND|KEYWORD:OR) comp-expr)*

comp-expr		: KEYWORD:NOT comp-expr	
				: arith-expr ((EE|LT|GT|LTE|GTE) arith-expr)*

arith-expr		: term ((PLUS|MINUS) term)*

term    		: factor ((MUL|DIV|INT-DIV|MOD) factor)*

factor			: (PLUS|MINUS) factor
				: power

power			: call (POW factor)*

call			: atom (LPAREN (expr (COMMA expr)*)? RPAREN)?
				: atom (DOT|EQ) IDENTIFIER (LPAREN (expr (COMMA expr)*)? RPAREN)

atom 			: INT|FLOAT|STRING|IDENTIFIER
				: LPAREN expr RPAREN
				: array-expr
				: if-expr
				: for-expr
				: while-expr
				: do-while-expr
				: func-def

array-expr		: LSQUARE (expr (COMMA expr)*)? RSQUARE

if-expr			: KEYWORD:if expr KEYWORD:then 
				  (expr if-expr-b|if-expr-c?)
				  | (NEWLINE statements KEYWORD:endif|if-expr-b|if-expr-c)

if-expr-b		: KEYWORD:elif expr KEYWORD:then 
				  (expr if-expr-b|if-expr-c?)
				  | (NEWLINE statements KEYWORD:endif|if-expr-b|if-expr-c)

if-expr-c		: KEYWORD:else
				  expr
				  | (NEWLINE statements KEYWORD:endif)

for-expr		: KEYWORD:for IDENTIFIER EQ expr KEYWORD:to expr (KEYWORD:step expr)? 
				  (KEYWORD:then expr)
				  | (NEWLINE statements (KEYWORD:next IDENTIFIER))

while-expr		: KEYWORD:while expr 
				  (KEYWORD:then expr)
				  | (NEWLINE statements KEYWORD:endwhile)

do-while-expr	: KEYWORD:do
				  (expr KEYWORD:until expr)
				  | (NEWLINE statements NEWLINE KEYWORD:until expr)

func-def		: KEYWORD:function IDENTIFIER?
				  LPAREN (IDENTIFIER (COMMA IDENTIFIER)*)? RPAREN
				  (ARROW expr)
				  | (NEWLINE statements KEYWORD:endfunction)

param-def		: KEYWORD:procedure IDENTIFIER?
				  LPAREN (IDENTIFIER (COMMA IDENTIFIER)*)? RPAREN
				  (ARROW expr)
				  | (NEWLINE statements KEYWORD:endprocedure)